<?php 
	// Load settings file
	include ("settings.php");
	// Load class libraries
	include ($lib_dir . "db_class.php");				// Database (Adam Mackay)
	include ($lib_dir . "encryption_class.php");		// Encryption (Saxon Partridge Smith)

	$db = new db();										// New Instance of DB
	$encryption = new encryption();						// New Instance of Encryption 
	$encryption->setKey($encryption_key);				// Set Private Key (Encryption)
	$connected = $db->connect();						// Make a new connection with the database	
    
	function verify_access($db, $enc){
		// method to check if the cookie has been tampered with by the user 
		// 2 cookies are generated at login, 
		//		one will be the user ID 
		//		The other will be a session id generated by the login page specific to the time of login 
		
		// Step 1: verify we have both cookies (login_cookie and session_code) (variables set in Settings.php)
        if(isset($_COOKIE[$GLOBALS['login_cookie']])){
            if (isset($_COOKIE[$GLOBALS['session_code']])){
				// retrieve the user data from the database relating to the cookie storing the userID
				$user_data = $db->getRow("fh_users", "id='" . $_COOKIE[$GLOBALS['login_cookie']] . "'");
				
				// create a string to be encrypted based on the user data, it used 2 timestamps (when the account was registered and when the user logged in)
                $salted_key = $user_data['id'] . $user_data['password'] . $user_data['lastlogin_timestamp'] . $user_data['timestamp'];
				
				// Pass into encryption class
				$enc->setPlainText(trim($salted_key));       
                $session_Key = $enc->classRun();
				
				// obtain the cookie code generated at login and verify it matches what has just generated
                $cookie_code = $_COOKIE[$GLOBALS['session_code']];

                if ($session_Key == $cookie_code){
					// A match! - The cookie has not been tampered with, return True to verify its authenticity
                    return true;
                }
            }
        }
		// Been unable to verify the cookie data, so access is not verified - return false
        return false;
    }
	if ($connected){									// Do we have DB connection? (Yes)
		if (verify_access($db, $encryption)){			// Verify the cookie has not been tampered with
			if (isset($_COOKIE[$login_cookie])){		// Obtain the userID to retrieve data for that user
				$uid = $_COOKIE[$login_cookie];
				setcookie($login_cookie, $uid, $cookie_time);								// Reset cookie times
				$user = $db->getRow("fh_users", "id = '" . $uid . "'");						// Retrieve user details
				if ($user){							// User should always be > 0 (Old code this can be removed at the next update)
					$userAccessLevel = $user['priviledge_id'];									// get Priviledge ID
					$accessCheck = $db->getRow("fh_priviledge_settings", "priviledge_id = '". $userAccessLevel . "'");
					if (isset($_GET['page']) && is_array($accessCheck)){						// does the page exist in the accessCheck array
						if (array_key_exists($_GET['page'], $accessCheck)){
							// The page was found inside the accessCheck array (db results)
							if ($_GET['page'] != "logout"){
								// Make sure we are not on a logout page (as it will divert to unauthorised access otherwise
								if ($accessCheck[$_GET['page']] == 1){
								   //the page has a 1 value representing True, then allow the user to see the page
									$visiting_page = $_GET['page'] . ".php";
								}else{
								   // The database has a 0 (or other integer) marked against it, deny viewing, divert to unauthorised access 
								   $visiting_page = "unauthorised_access.php";
								}
							}else{
								// page is logout.php, so we want to show it
								$visiting_page = "logout.php";
							}
						}else{
							// The user priviledge doesnt exist in the database (ie its been deleted or user details incorrectly edited
							if ($_GET['page'] != "logout"){
								// We are not on the logout page - so display 404 error (This should be updated to a "Technical fault" page
								$visiting_page = "404.php";
							}else{
								// We are on the log out page, so lets show logout.php
								$visiting_page = "logout.php";
							}
						
						}
					}else{
						// no data for this access check or page is
						$visiting_page = "account.php";
					}
				}else{
					// There is no user credentials, establish the page
					// note for future updates: convert this into a function to shrink code repetition (use switch case beneath)
					if (isset($_GET['page'])){
						if($_GET['page'] != ""){
							$visiting_page =  $_GET['page'] . ".php";
						}else{
							$visiting_page = $home_page;
						}
					}else{
						$visiting_page = $home_page;
					}
				}
			}else{
				// Same as above convert to a function and use switch case in else statement beneath
				$user = NULL;
				if (isset($_GET['page'])){
					if($_GET['page'] != ""){
						$visiting_page =  $_GET['page'] . ".php";
					}else{
						$visiting_page = $home_page;
					}
				}else{
					$visiting_page = $home_page;
				}
			}
		}else{
			// cookies tempared with or user is not in a session
			setcookie($login_cookie, "", time()-3600);
			setcookie($session_code, "", time()-3600);
			if (isset($_GET['page'])){
				switch ($_GET['page']){
					case "register":
						$visiting_page = "register.php";
						break;
					case "item":
					    $visiting_page = "item.php";
					    break;
					case "logout":
						$visiting_page = "logout.php";
						break;
					case "test_page":
					    $visiting_page = "test_page.php";
					    break;
					default:
			    		$visiting_page = $_GET['page'] . ".php";
			     }
			}else{
				$visiting_page = $home_page;
			}
		}
    }else{
		//all else fails load home page (logged out)
        $visiting_page = $home;
    }
?>
